# -*- coding: utf-8 -*-

'''

  fcm: grapher

'''

# local
from .graph import Graph
from .options import GraphOptions

# canteen
from canteen import model, logic, decorators

# graph models
from fatcatmap.models import Vertex


@decorators.bind('graph')
class Grapher(logic.Logic):

  ''' Graph traversal and resolver logic for ``catnip`` application operations.
      Knows how to travers fcm's internal graph structures and produce payloads
      for client-side code. '''

  def _default_origin(self):

    ''' Retrieve the default origin node for an origin-less request.

        :returns: Static node key at encoded address ``Ok5vZGU6QzAwMTQ3MTcz``,
          which won't be hardcoded for long. '''

    # @TODO(sgammon): make this not suck
    return Vertex.get(model.Key(urlsafe="Ok5vZGU6QzAwMTQ3MTcz"))

  ## == Public == ##
  @decorators.bind('open')
  def open(self, origin=None, fulfill=True, **options):

    ''' Open an interactive session to build and explore a graph. Provides an
        interface suitable for realtime-style dispatch.

        :param origin: Origin node for the new graph session, if any. Defaults
          ``None``, signalling that a default node should be retrieved.

        :param fulfill: Boolean flag indicating whether the caller wishes to
          fullfill graph structure with actual objects, or just wishes to
          explore and traverse the *structure* of the graph. A truthy value
          indicates the former, a falsy the latter. Defaults to ``True``.

        :param **options: Additional options to pass to a ``GraphOptions``
          instance before beginning the graph exploration session.

        :yields: Artifacts generated by the graph exploration process, one at a
          time, as they are available. *Artifacts* can generally be defined as
          any of the following:

          - matching nodes, as they are being traversed
          - edges begween matching nodes, as they are being traversed
          - native data records for nodes or edges, assuming ``fulfill`` '''

    # construct graph and start yielding
    with Graph(origin or self._default_origin(),
               options=GraphOptions(**options)) as session:

      for artifact in session.build(fulfill=fulfill, iter=True):
        yield artifact

      yield session

  @decorators.bind('construct')
  def construct(self, origin=None, fulfill=True, **options):

    ''' Synchronously construct a graph response, suitable for regular use over
        widely-supported AJAX RPC transports.

        :param origin: Origin node to use as the starting point for the
          constructed graph. Optional parameter, defaults to ``None``
          (indicating that a default origin should be used).

        :param fulfill: Boolean flag indicating that the caller wishes to
          receive full data blobs describing encountered ``Node`` and ``Edge``
          records, rather than just structure. Defaults to ``True``.

        :param options: Additional options to pass to a ``GraphOptions``
          instance before  beginning the graph construction process.

        :returns: Constructed graph structure, according to the best available
          data to this application, for the origin node ``origin``, optionally
          with full data blobs (assuming ``fulfill`` mode is activated), and
          accoring to any additional arbitrarion ``options``. '''

    # construct graph
    return Graph((
              origin or self._default_origin()),
              options=GraphOptions(**options)).build(fulfill=fulfill, iter=False)


__all__ = (
  'Graph',
  'Grapher',
  'GraphOptions'
)
